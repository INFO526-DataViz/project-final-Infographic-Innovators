---
title: "From Takeoff to Touchdown: Dissecting Data on Air Disasters"
subtitle: "INFO 526 - Fall 2023 - Project Final"
author: 
  - name: "Infographic Innovators - Antonio, Bharath, Eshaan, Thanoosha"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "A shiny app integration with aircraft crash analysis"
title-slide-attributes:
  data-background-image: images/presentation_2.png
  data-background-size: stretch
  data-background-opacity: "0.8"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    transition: slide
    background-transition: fade
    logo: images\flight_logo.png
    footer: "[✈️ Infographic Innovators](https://info526-dataviz.github.io/project-final-Infographic-Innovators/)"
    scrollable: true
    
code-fold: true
editor: visual
execute:
  echo: false
  warning: false
---

```{r}
#| label: load-packages
#| include: false
if (!require(pacman))
  install.packages(pacman)


pacman::p_load(tidyverse,
               dplyr,
               janitor,
               dlookr,
               here,
               ggpubr,
               maps,
               plotly,
               gganimate,
               MetBrewer,
               ggsci,
               scales,
               fmsb,
               gifski,
               ggimage,
               ggtext,
               emojifont,
               magick,
               lubridate,
               patchwork,
               viridis,
               usmap,
               sf,
               sp,
               animation)

pacman::p_load_gh("BlakeRMills/MoMAColors")
```

```{r}
#| label: setup
#| include: false
# setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = "sans"))

# setting width of code output
options(width = 65)

# setting figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,        # 8" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 1,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 200,            # higher dpi, sharper image
  message = FALSE
)
```

```{r}
#| label: dataset
#| include: false
flights_ntsb <- read_csv(here("data", "flight_crash_data_NTSB.csv"))
probable_cause_flights <- read_csv(here("data","new_flights_PC.csv"))
```

```{r remove_columns, include=FALSE}
# selecting columns which are required for our analysis
flights_ntsb <- flights_ntsb |>
  select(
    EventType, EventDate,
    City, State,
    ReportType, HighestInjuryLevel,
    FatalInjuryCount, SeriousInjuryCount,
    MinorInjuryCount, ProbableCause,
    Latitude, Longitude,
    AirCraftCategory, NumberOfEngines, 
    AirCraftDamage, WeatherCondition
  ) |>
  # cleaning column names using janitor package
  clean_names()
probable_cause_flights["CauseSummary"]<-probable_cause_flights["Probable_Cause"]
#removing null values
probable_cause_flights <- subset(probable_cause_flights, probable_cause_flights$HighestInjuryLevel!="")
probable_cause_flights <- probable_cause_flights |>
  select(
    EventType,
    EventDate,
    City,
    State,
    ReportType,
    HighestInjuryLevel,
    FatalInjuryCount,
    SeriousInjuryCount,
    MinorInjuryCount,
    ProbableCause,
    Latitude,
    Longitude,
    AirCraftCategory,
    NumberOfEngines,
    AirCraftDamage,
    WeatherCondition,
    CauseSummary
  ) |>
  # cleaning column names using janitor package
  clean_names()
```

```{r data_wrangle, include=FALSE}
# Modifying the data using mutate()
flights_ntsb <- flights_ntsb |>
  # getting event time from the date time column
  mutate(event_time = format(event_date, "%H:%M"),
         # places the column after event_date
         .after = event_date) |>
  mutate(
    # getting event date from the date time column
    event_date = as.Date(event_date),
    # extracting flight phase based on NTSB's designated terminology
    flight_phase = case_when(
      grepl("Landing", probable_cause, ignore.case = TRUE) ~ "Landing",
      grepl("Stop", probable_cause, ignore.case = TRUE) ~ "Landing",
      grepl("Approach", probable_cause, ignore.case = TRUE) ~ "Approach",
      grepl("Takeoff", probable_cause, ignore.case = TRUE) ~ "Takeoff",
      grepl("Take-off", probable_cause, ignore.case = TRUE) ~ "Takeoff",
      grepl("Maneuvering", probable_cause, ignore.case = TRUE) ~ "Maneuvering",
      grepl("Climb", probable_cause, ignore.case = TRUE) ~ "Climb",
      grepl("Descent", probable_cause, ignore.case = TRUE) ~ "Descent",
      grepl("Taxi", probable_cause, ignore.case = TRUE) ~ "Taxi",
      grepl("Cruise", probable_cause, ignore.case = TRUE) ~ "Cruise",
      grepl("Hover", probable_cause, ignore.case = TRUE) ~ "Hover",
      grepl("Standing", probable_cause, ignore.case = TRUE) ~ "Standing",
      grepl("Uncontrolled Descent", probable_cause, ignore.case = TRUE) ~ "Uncontrolled Descent",
      grepl("Emergency", probable_cause, ignore.case = TRUE) ~ "Emergency",
      grepl("Holding", probable_cause, ignore.case = TRUE) ~ "Holding",
    ),
    # places the flight phase column after probable cause
    .after = probable_cause 
  ) |>
  # getting year and month of the events
  mutate(
    event_year = year(event_date),
    event_month = month(event_date)
  )
```

## Objective {.smaller}

::: nonincremental
Conduct an in-depth analysis of aircraft crashes within the United States to uncover temporal trends and geographical patterns.

**Background**

-   Dataset procured from the National Transportation Safety Board (NSTB).

-   Contains records of aircraft crashes in the U.S. from Jan 1, 1980, to Dec 31, 2022.

-   Originally comprised 89,134 rows and 38 columns, refined to 20 columns for focused analysis.
:::

::: nonincremental
**Value**

-   Enhance understanding of aviation safety and factors contributing to aircraft crashes.

-   Personalize insights based on diverse experiences with air travel.
:::

## Questions Proposed

::: incremental
1.  What are the aircraft crashes' locations, timings, and consequences?

2.  What contributes to the crashes, and does weather significantly impact the increase in aircraft crashes?
:::

# Navigating Through the Timeline of Flight Incidents

## Time-Series Analysis {.smaller}

::: nonincremental
```{r timeseries_data, include=FALSE}
# Creating a dataset for the timeSeries plot
flights_ntsb_timeseries <- flights_ntsb |>
  group_by(event_year) |>
  summarise(
    total_fatalities = sum(fatal_injury_count, na.rm = TRUE),
    total_serious_injuries = sum(serious_injury_count, na.rm = TRUE),
    total_minor_injuries = sum(minor_injury_count, na.rm = TRUE)
  )

#time series plot ----
tp <-
  ggplot(flights_ntsb_timeseries,
         aes(x = event_year, y = total_fatalities)) +
  geom_line() +
  labs(title = "Yearly Aircraft Crash Fatalities",
       x = "Year",
       y = "Total Fatalities") +
  theme_minimal()

# Interactive plot with ploty---- total fatalities
p <-
  ggplot(flights_ntsb_timeseries,
         aes(x = event_year, y = total_fatalities)) +
  geom_line() +
  geom_text(aes(label = "✈️"),
            vjust = -0.5,
            hjust = 0.5,
            size = 5) +
  labs(title = "Yearly Aircraft Crash Fatalities",
       x = "Year",
       y = "Total Fatalities")

ggplotly(p)
```
:::

![](images/animated_fcdata.gif)

## Choropleth Map {.smaller}

::: nonincremental
```{r mapl_plot_data, include=FALSE}
    # Filtering out NA and invalid Latitude and Longitude values
    flights_ntsb_maps <- flights_ntsb |>
      subset(!is.na(longitude) & !is.na(latitude)
             & latitude < 75 & latitude > 10 & longitude < -60)

    # Creating a dataset for the map plot and picking the columns that we need
    flights_ntsb_maps <- flights_ntsb_maps |>
      # getting total crashes and total injuries
      group_by(state, event_year) |>
      summarise(
        total_crashes = n(),
        total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
      ) |>
      drop_na()

    # getting unique states in the data
    unique_states <- unique(flights_ntsb_maps$state)

    # getting all years involved in the data
    all_years <- unique(flights_ntsb_maps$event_year)

    # combining above data so that we will be generating data of the states 
    # which are missing in the original data
    all_states_data <-
      expand.grid(state = unique_states, event_year = all_years)

    flights_ntsb_maps <-
      # using left_join() to combine the data based on state and event_year
      left_join(all_states_data,
                flights_ntsb_maps,
                by = c("state", "event_year")) |>
      mutate(
        total_crashes = ifelse(is.na(total_crashes), 0, total_crashes),
        total_injuries = ifelse(is.na(total_injuries), 0, total_injuries)
      )

```

```{r function_hexbin, include=FALSE}
    # Creating a function to plot a Hex-Bin map
    getHexBinMap <- function(input_year) {
      plot_data <- flights_ntsb_maps |>
        filter(event_year == input_year)
      
      plot_usmap(data = plot_data,
                 values = "total_crashes", 
                 color = "black") +
        theme_void() +
        scale_fill_gradientn(
          colors = met.brewer("Hokusai2"),
          name = "Number of Crashes",
          limits = c(0, 400)
        ) +
        labs(title = sprintf("Flight crashes in US states during %d", input_year)) +
        theme(
          legend.position = 'right',
          plot.title = element_text(size = 40, hjust = 0.5, face = "bold", vjust = -1),
          legend.text = element_text(size = 18),
          legend.title = element_text(size = 20, face = "bold")
        )
    }
```

```{r images_yearwise, include=FALSE}
    # Creating a list of Years from dataset
    years_list <- flights_ntsb_maps |>
      arrange(event_year) |>
      distinct(event_year) |>
      pull()

    for (i in seq_along(years_list)) {
      my_maps <-
        paste0("images/map_plot/flight_crash_us_states",
               years_list[i],
               ".jpg")
      getHexBinMap(input_year = years_list[i])
      ggsave(
        my_maps,
        height = 9,
        width  = 15,
        unit   = "in",
        dpi    = 200
      )
    }

```

```{r animation_hexbin}
    # making gif using gganimate package
    hex_bin_maps <- list.files(path = "images/map_plot/", full.names = TRUE)
    hex_bin_maps_list <- lapply(hex_bin_maps, image_read)

    # Joining all the saved images
    joined_plots <- image_join(hex_bin_maps_list)

    # Animating the images using image_animate() and restting the resolution
    # Setting fps = 1
    hex_bin_maps_animation <- image_animate(image_scale(joined_plots, "2000x1000"), fps = 2)

    # Saving gif to the repository
    image_write(image = hex_bin_maps_animation,
                path = "images/flight_crash_us_states.gif")

    hex_bin_maps_animation

```
:::

## Radial Bar - Total Crashes

::: nonincremental
```{r radial_plot, include=FALSE}
# Creating a filtered dataset for Radial Plot
flights_ntsb_radial <- flights_ntsb |>
  # getting total crashes and total injuries
  group_by(flight_phase) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  ) |>
  drop_na() |>
  arrange(desc(total_crashes))

# getting top 5 flight phases where flight crashes occured
flights_ntsb_radial <- flights_ntsb_radial |>
  slice(1:5) |>
  bind_rows(
    flights_ntsb_radial |>
      slice(-(1:5)) |>
      summarize(
        flight_phase = "Other",
        total_crashes = sum(total_crashes),
        total_injuries = sum(total_injuries)
      )
  ) |>
  mutate(flight_phase = fct_inorder(flight_phase))

flights_ntsb_radial
```

```{r radial_plot_crashes, fig.height=6, fig.width=6}
#| code-fold: true
#| code-summary: "Radial Bar Plot - Total Crashes"

# Plotting a Radial Barplot to show the Total Count of Crashes and phase of flight 
flights_radial_bar_crashes <-
  ggplot(flights_ntsb_radial,
         aes(x = fct_rev(flight_phase), y = total_crashes, 
             fill = flight_phase)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(hjust = 1.2, size = 4.8, 
            aes(y = 0, label = comma(total_crashes))) +
  coord_polar(theta = "y") +
  labs(
    x = NULL,
    y = NULL,
    fill = "Phase of Flight",
    title = "A Radial View of Total Crashes",
    subtitle = "as per the phase of flight",
    caption = ""
  ) +
  scale_y_continuous(
    breaks = seq(0, 27000, by = 5000),
    limits = c(0, 27000)
  ) +
  scale_x_discrete(expand = c(0.35, 0)) + 
  scale_fill_frontiers() +
  theme(
    legend.position = "bottom",
    axis.text = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    plot.title = element_text(size = 20, face = "bold"),
    plot.subtitle = element_text(size = 15)
    ) +
  guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 14),
        keywidth = 1.5,
        keyheight = 0.5
      )
    )
flights_radial_bar_crashes
```
:::

## Radial Bar Plot - Total Injuries

::: nonincremental
```{r radial_plot_injuries, fig.height=6, fig.width=6}
#| code-fold: true
#| code-summary: "Radial Bar Plot - Total Injuries"

flights_radial_bar_injuries <-
  ggplot(flights_ntsb_radial,
         aes(x = fct_rev(flight_phase), y = total_injuries, 
             fill = flight_phase)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(hjust = 1.2, size = 4.8, 
            aes(y = 0, label = comma(total_injuries))) +
  coord_polar(theta = "y") +
  labs(
    x = NULL,
    y = NULL,
    fill = "Phase of Flight",
    title = "A Radial View of Total Injuries",
    subtitle = "as per the phase of flight",
    caption = ""
  ) +
  scale_y_continuous(
    breaks = seq(0, 13200, by = 1000),
    limits = c(0, 13200)
  ) +
  scale_x_discrete(expand = c(0.35, 0)) + 
  scale_fill_frontiers() +
  theme(
    legend.position = "bottom",
    axis.text = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    plot.title = element_text(size = 20, face = "bold"),
    plot.subtitle = element_text(size = 15)
    ) +
  guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 14),
        keywidth = 1.5,
        keyheight = 0.5
      )
    ) 

flights_radial_bar_injuries
# remaining - titles, some texts
# interactive - plotly
# animate - plotly by years or gganimate bar growth
```
:::

# Analysis of Causes of Crashes

## Waffle Chart {.smaller}

::: nonincremental
```{r datawragling,include=FALSE}
count <- probable_cause_flights |>
  group_by(cause_summary)|>
  summarize(perc=n())|>
  mutate(
    perc= (perc/sum(perc))
  )
count_waffle <- count |>
  mutate(
    remainder = perc * 100 - floor(perc * 100),
    floored = floor(perc * 100)
  ) |>
  arrange(desc(remainder)) |>
  mutate(number = ifelse(100 - sum(floored) >= row_number(), floored + 1, floored)) |>
  arrange(perc)
```

```{r function-waffle, fig.height=4, fig.width=5}
waffle_data <- count_waffle |>
      slice(rep(1:n(), times = number)) |>
      mutate(fill_value = ifelse(row_number() <= sum(floored), floored, floored + 1))
    
plot_data <- expand.grid(x = 0:9,y = 0:9) |>
      rowwise() |>
      mutate(index = 1+sum(x * 10 + y >= cumsum(count_waffle$number)),
             cause = count_waffle$cause_summary[[index]])
    
    # Create a waffle plot
p<- ggplot(plot_data, aes(x, y, color = cause, group=cause), show.legend=F) +
      geom_text(label = "✈",
                family = 'sans',
                size = 8) +
  scale_color_manual(values=met.brewer("Redon"))+
      coord_equal()+
      labs(title="Waffle chart showing different causes of crashes",
           colour = 'Cause')
flight_plot <- ggplotly(p, tooltip = c("color")) |>
  layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE, title=""),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE, title=""), showlegend=FALSE)

flight_plot
```
:::

## Density Plot

::: nonincremental
```{r distribution, fig.height=4.5, fig.width=4.5}
ggplot(
  subset(
    probable_cause_flights,
    probable_cause_flights$cause_summary == "pilot's failure"
  )
) +
  geom_density(aes(
    x = year(event_date),
    fill = factor(highest_injury_level, levels = c("Fatal", "Serious", "Minor"))
  ), alpha = 0.7) +
  scale_fill_manual(values = c("#bcd67c", "#d398ff", "#82dfe2")) +
  labs(title = "Distribution of crashes caused by pilot's negligence over time",
       x = "Year",
       y = "Density",
       fill = "Highest Injury Level") +
  theme(
    panel.grid.major = element_blank(),
    plot.title = element_text(size = 20, face = "bold"),
    plot.subtitle = element_text(size = 15),
    axis.text = element_text(size = 12),
    axis.title = element_text(hjust = 0, size = 12)
    )

```
:::

# Assessing the Influence of Weather Conditions on Crashes

## Radar Plot {.smaller}

::: nonincremental
```{r radarchart_data, include=FALSE}
# Assigning different weather conditions to variables
# IFR and IMC are same conditions so we are combining them
# VFR and VMC are same conditions so we are combining them
flights_ntsb_radar <- flights_ntsb |>
  mutate(
    weather_condition = case_when(
      weather_condition == "IFR" ~ "IMC",
      weather_condition == "VFR" ~ "VMC",
      weather_condition == "Unknown" ~ "UNK",
      is.na(weather_condition) ~ "UNK",
      TRUE ~ weather_condition
    )
  ) |>
  # getting total crashes and total injuries
  group_by(event_month, weather_condition) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  ) |>
  arrange(event_month)
```

```{r radar_chart, include=FALSE}
# Filtering out weather condition 'IMC'
radar_trace_r1 <- flights_ntsb_radar |>
  filter(weather_condition %in% c("IMC")) |>
  pull(total_crashes)

radar_trace_r1 <-
  c(
    radar_trace_r1,
    flights_ntsb_radar |> 
      filter(weather_condition == "IMC" & event_month == 1) |>
      pull(total_crashes)
  )

# Filtering out weather condition 'VMC'
radar_trace_r2 <- flights_ntsb_radar |>
  filter(weather_condition %in% c("VMC")) |>
  pull(total_crashes)

radar_trace_r2 <-
  c(
    radar_trace_r2,
    flights_ntsb_radar |> 
      filter(weather_condition == "VMC" & event_month == 1) |> 
      pull(total_crashes)
  )

radar_theta <- c("Jan" , "Feb" , "Mar" , "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec", "Jan")
```

```{r radar_chart_plotly, fig.height=4.2, fig.width=4.2}
# Plotting an Interactive Radar Plot using Plotly
radar_chart <- plot_ly(type = 'scatterpolar',
               fill = 'toself',
               mode = 'lines+markers')

# first plot tracing of VMC data
radar_chart <- radar_chart |>
  add_trace(
    r = radar_trace_r2,
    theta = radar_theta,
    name = 'VMC'
  )
# second plot tracing of IMC data
radar_chart <- radar_chart |>
  add_trace(
    r = radar_trace_r1,
    theta = radar_theta,
    name = 'IMC'
  )
# plot layout configuration
radar_chart <- radar_chart |>
  layout(polar = list(radialaxis = list(
    visible = T,
    range = c(0, 10500)
  )))

radar_chart
```

Here, VMC stands for `Visual Meteorological Conditions` and IMC stands for `Instrument Meteorological Conditions`.
:::

## Conclusion {.smaller}

::: incremental
-   Annual crash occurrences remain notable, but a declining trend is observed over the decades from 1980 to 2022.
-   The decline in fatalities over time underscores the effectiveness of safety measures and protocols implemented in the aviation sector.
-   Shiny App - [From Takeoff to Touchdown: Dissecting Data on Air Disasters](https://99javc-velamala-bharath.shinyapps.io/fromtakeofftotouchdown/)
:::

## Problems Faced {.smaller}

::: nonincremental
-   Lot of information from the to process and visualize.
-   The obtained dataset was partially skewed which made it harder to normalize certain metrics for visualization.
-   Performing Data Wrangling on the dataset was difficult as it was of size `89,134 rows and 20 columns`.
-   But, because the dataset was vast, we could also create multiple visualizations which we could present for this project.
:::

## Future Scope {.smaller}

::: nonincremental
-   Exploring other countries and finding a credible source for the data.
-   Exploring Data and correlating with other credible sources to find the exact reason behind the crash.
-   The developed Shiny App can be used as an alternative to the current dashboard which visualizes flight crashes on the `NTSB.gov` website.
-   Diving in Deeper into flight crashes and visualizing flight paths and plotting real-time status of flights.
:::

## Thank you
::: nonincremental
![](images/thankyou.png){fig-align="center" width="600" height="450"}
:::
