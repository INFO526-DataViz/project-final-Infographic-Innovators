---
title: "From Takeoff to Touchdown: Dissecting Data on Air Disasters"
subtitle: "INFO 526 - Project Final"
author: 
  - name: "Infographic Innovators - Antonio, Bharath, Eshaan, Thanoosha"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "A shiny app integration with aircraft crash analysis"
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

```{r load_packages, message=FALSE, include=FALSE}
# GETTING THE LIBRARIES
if (!require(pacman))
  install.packages(pacman)


pacman::p_load(tidyverse,
               dplyr,
               janitor,
               dlookr,
               here,
               ggpubr,
               maps,
               plotly,
               gganimate,
               MetBrewer,
               ggsci,
               sf,
               fmsb,
               maps,
               rnaturalearth,
               state,
               ggspatial,
               geojsonio,
               RColorBrewer,
               sf,
               broom)
```

```{r ggplot_setup, message=FALSE, include=FALSE}
# setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = "sans"))

# setting width of code output
options(width = 65)

# setting figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,        # 8" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 1,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 180,            # higher dpi, sharper image
  message = FALSE
)
```

```{r load_dataset, include=FALSE}
# Reading the data using read_csv
flights_ntsb <- read_csv(here("data", "flight_crash_data_NTSB.csv"))
```

## Abstract

```{r remove_columns, include=FALSE}
# selecting columns which are required for our analysis
flights_ntsb <- flights_ntsb |>
  select(
    EventType, EventDate,
    City, State,
    ReportType, HighestInjuryLevel,
    FatalInjuryCount, SeriousInjuryCount,
    MinorInjuryCount, ProbableCause,
    Latitude, Longitude,
    AirCraftCategory, NumberOfEngines, 
    AirCraftDamage, WeatherCondition
  ) |>
  # cleaning column names using janitor package
  clean_names()
```

```{r data_wrangle, include=FALSE}
flights_ntsb <- flights_ntsb |>
  mutate(event_time = format(event_date, "%H:%M"),
         .after = event_date) |>
  mutate(
    event_date = as.Date(event_date),
    flight_phase = case_when(
      grepl("Landing", probable_cause, ignore.case = TRUE) ~ "Landing",
      grepl("Stop", probable_cause, ignore.case = TRUE) ~ "Landing",
      grepl("Approach", probable_cause, ignore.case = TRUE) ~ "Approach",
      grepl("Takeoff", probable_cause, ignore.case = TRUE) ~ "Takeoff",
      grepl("Take-off", probable_cause, ignore.case = TRUE) ~ "Takeoff",
      grepl("Maneuvering", probable_cause, ignore.case = TRUE) ~ "Maneuvering",
      grepl("Climb", probable_cause, ignore.case = TRUE) ~ "Climb",
      grepl("Descent", probable_cause, ignore.case = TRUE) ~ "Descent",
      grepl("Taxi", probable_cause, ignore.case = TRUE) ~ "Taxi",
      grepl("Cruise", probable_cause, ignore.case = TRUE) ~ "Cruise",
      grepl("Hover", probable_cause, ignore.case = TRUE) ~ "Hover",
      grepl("Standing", probable_cause, ignore.case = TRUE) ~ "Standing",
      grepl("Uncontrolled Descent", probable_cause, ignore.case = TRUE) ~ "Uncontrolled Descent",
      grepl("Emergency", probable_cause, ignore.case = TRUE) ~ "Emergency",
      grepl("Holding", probable_cause, ignore.case = TRUE) ~ "Holding",
    ),
    .after = probable_cause
  ) |>
  mutate(
    event_year = year(event_date),
    event_month = month(event_date)
  )
```

```{r timeseries_data, include=FALSE}
flights_ntsb_timeseries <- flights_ntsb |>
  group_by(event_year) |>
  summarise(
    total_fatalities = sum(fatal_injury_count, na.rm = TRUE),
    total_serious_injuries = sum(serious_injury_count, na.rm = TRUE),
    total_minor_injuries = sum(minor_injury_count, na.rm = TRUE)
  )
```

```{r radarchart_data, include=FALSE}
flights_ntsb_radar <- flights_ntsb |>
  mutate(
    weather_condition = case_when(
      weather_condition == "IFR" ~ "IMC",
      weather_condition == "VFR" ~ "VMC",
      weather_condition == "Unknown" ~ "UNK",
      is.na(weather_condition) ~ "UNK",
      TRUE ~ weather_condition
    )
  ) |>
  group_by(event_month, weather_condition) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  )
```

```{r radial_plot}
flights_ntsb_radial <- flights_ntsb |>
  group_by(flight_phase) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  ) |>
  drop_na() |>
  arrange(desc(total_crashes))

flights_ntsb_radial <- flights_ntsb_radial |>
  slice(1:5) |>
  bind_rows(
    flights_ntsb_radial |>
      slice(-(1:5)) |>
      summarize(
        flight_phase = "Other",
        total_crashes = sum(total_crashes),
        total_injuries = sum(total_injuries)
      )
  ) |>
  mutate(flight_phase = fct_inorder(flight_phase))

flights_ntsb_radial
```

```{r radial_plot_crashes}
#| code-fold: true
#| code-summary: "Radial Bar Plot - Total Crashes"

flights_radial_bar_crashes <-
  ggplot(flights_ntsb_radial,
         aes(x = fct_rev(flight_phase), y = total_crashes, 
             fill = flight_phase)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(hjust = 1.2, size = 4.5, 
            aes(y = 0, label = total_crashes)) +
  coord_polar(theta = "y") +
  labs(
    x = NULL,
    y = NULL,
    fill = "Phase of Flight",
    title = "",
    subtitle = "",
    caption = ""
  ) +
  scale_y_continuous(
    breaks = seq(0, 27000, by = 5000),
    limits = c(0, 27000)
  ) +
  scale_fill_frontiers() +
  theme(
    legend.position = "bottom",
    axis.text = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank()
    ) +
  guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 14),
        keywidth = 1.5,
        keyheight = 0.5
      )
    )

flights_radial_bar_crashes
# remaining - titles, some texts
# interactive - plotly
# animate - plotly by years or gganimate bar growth
# sources:
# gganimate - https://r-graph-gallery.com/288-animated-barplot-transition.html
# ploty - https://plotly.com/r/animations/
```

```{r radial_plot_injuries}
#| code-fold: true
#| code-summary: "Radial Bar Plot - Total Injuries"

flights_radial_bar_injuries <-
  ggplot(flights_ntsb_radial,
         aes(x = fct_rev(flight_phase), y = total_injuries, 
             fill = flight_phase)) +
  geom_bar(stat = "identity", width = 0.8) +
  geom_text(hjust = 1.2, size = 4.5, 
            aes(y = 0, label = total_injuries)) +
  coord_polar(theta = "y") +
  labs(
    x = NULL,
    y = NULL,
    fill = "Phase of Flight",
    title = "",
    subtitle = "",
    caption = ""
  ) +
  scale_y_continuous(
    breaks = seq(0, 13200, by = 2500),
    limits = c(0, 13200)
  ) +
  scale_fill_manual(
    values = met.brewer("Veronese")
  ) +
  theme(
    legend.position = "bottom",
    axis.text = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank()
    ) +
  guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 14),
        keywidth = 1.5,
        keyheight = 0.5
      )
    )

flights_radial_bar_injuries
# remaining - titles, some texts
# interactive - plotly
# animate - plotly by years or gganimate bar growth
# sources:
# gganimate - https://r-graph-gallery.com/288-animated-barplot-transition.html
# ploty - https://plotly.com/r/animations/
```

```{r year_radial}
top5_phases <- flights_ntsb |>
  group_by(flight_phase) |>
  summarize(total_crashes = n()) |>
  arrange(desc(total_crashes)) |>
  top_n(5, total_crashes)

flights_ntsb_radial_year <- flights_ntsb |>
  group_by(flight_phase, event_year) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  ) |>
  drop_na() |>
  arrange(desc(total_crashes)) |>
  mutate(flight_phase = fct_other(flight_phase, 
                                  keep = pull(top5_phases, flight_phase))) |>
  group_by(flight_phase, event_year) |>
  summarize(total_crashes = sum(total_crashes),
            total_injuries = sum(total_injuries))

flights_ntsb_radial_decade <- flights_ntsb_radial_year |>
  mutate(event_decade = 10 * (event_year %/% 10)) |>
  group_by(flight_phase, event_decade) |>
  summarize(total_crashes = sum(total_crashes),
            total_injuries = sum(total_injuries))
```

```{r flight_maps}
flights_ntsb_maps <- flights_ntsb |>
  subset(!is.na(longitude) & !is.na(latitude)
         & latitude < 75 & latitude > 10 & longitude < -60)

flights_ntsb_maps <- flights_ntsb_maps |>
  group_by(state, event_year) |>
  summarise(
    total_crashes = n(),
    total_injuries = sum(fatal_injury_count, na.rm = TRUE) + sum(serious_injury_count, na.rm = TRUE) + sum(minor_injury_count, na.rm = TRUE)
  ) |>
  drop_na()

unique_states <- unique(flights_ntsb_maps$state)

all_years <- unique(flights_ntsb_maps$event_year)

all_states_data <-
  expand.grid(state = unique_states, event_year = all_years)

flights_ntsb_maps_updated <-
  left_join(all_states_data,
            flights_ntsb_maps,
            by = c("state", "event_year")) |>
  mutate(
    total_crashes = ifelse(is.na(total_crashes), 0, total_crashes),
    total_injuries = ifelse(is.na(total_injuries), 0, total_injuries)
  ) |>
  filter(state %in% state.name) |>
  # need to remove the below block as it is just a test
  group_by(state) |>
  summarize(
    total_crashes = sum(total_crashes),
    total_injuries = sum(total_injuries)
  ) |>
  arrange(state) |>
  mutate(state_id = as.character(row_number(state)))
```

```{r geom_spatial}
spdf <- geojson_read(here("data", "us_states_hexgrid.geojson"),  what = "sp")
spdf@data = spdf@data |>
  mutate(google_name = gsub(" \\(United States\\)", "", google_name)) |>
  subset(google_name != "District of Columbia")

#Fortify the data to create a data format output
#This format is needed to plot the map using the ggplot2 package
hex_fortify <- tidy(spdf, geometry = "google_name") 

# assign ids to states
# then join

hex_fortify <- hex_fortify %>%
       left_join(. , flights_ntsb_maps_updated, by=c("id"="state_id"))
```

```{r color_scale}
#Explore descriptive statistics 
mean(flights_ntsb_maps_updated$total_crashes)  #The sum of the values divided by the number of values
range(flights_ntsb_maps_updated$total_crashes) #A measure of dispersion within the dataset

#Create bins
#These labels will appear on the legend
hex_fortify$bin <- cut( hex_fortify$total_crashes, breaks = c(1000, 1500, 2000, 2500, 3000), labels = c("1000-1500", "1500-2000", "2000-2500", "2500+"))

#Choose a sequential ramp for our map 
#Where n = number of data classes 
my_palette <- brewer.pal(n=4, name="Greens")
```

```{r state_codes}
spdf_sf <- st_as_sf(spdf)
centroids <- st_centroid(spdf_sf)
abbreviations <- spdf@data$iso3166_2

# Combine into a data frame
centers <- cbind.data.frame(data.frame(centroids, id = abbreviations))
```

```{r hex_bin_map_plot}
# reference - https://r-graph-gallery.com/328-hexbin-map-of-the-usa.html
# no need to use latitude and longitude from our data, use geojson_read as they suggested from 
# I uploaded the data to data folder
# data can be found here - https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map

ggplot() +
  geom_polygon(
    data = hex_fortify,
    aes(
      fill = total_crashes,
      x = long,
      y = lat,
      group = group
    ),
    size = 0,
    alpha = 0.9,
    color = "#f7f7f7"
  ) +
  geom_text(data=centers, aes(x=x, y=y, label=id), color="#252525", size=5) + #Add our labels
  theme_void() +
  ggtitle("Map of Fatal Injuries in the United States in 2022 ") + #Add map title
  theme(
    legend.position = c(0.5, 0.9),
    #Choose legend positioning (horizontal, vertical)
    text = element_text(color = "#f7f7f7", face = "bold"),
    #This is where we customize the legend text
    plot.background = element_rect(fill = "#252525", color = NA),
    #Choose the colour of the background behind the title
    panel.background = element_rect(fill = "#252525", color = NA),
    #This is the main background
    legend.background = element_rect(fill = "#252525", color = NA),
    #This is the legend background
    plot.title = element_text(
      size = 18,
      hjust = 0.5,
      color = "#f7f7f7",
      face = "bold"
    ),
    #This we where we customize the title
  )
```
